<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>广度优先搜索t</title>
      <link href="/2022/06/10/guang-du-you-xian-sou-suo-suan-fa/"/>
      <url>/2022/06/10/guang-du-you-xian-sou-suo-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>​      广度优先搜索算法类似二叉树的层序遍历算法，首先访问指定节点v,再从v出发依次访问与v的邻接节点m…..等，直到将图中节点遍历完成。</p><p>​      在无向图中，邻接节点的邻接节点包含已访问过的节点，重复的访问会增加BFS算法的时间复杂度，因此在BFS算法中，实际每次访问的都是未被访问的节点，在代码实现中通常建立一个visit数组，用于存储各节点的访问状态，只寻找访问状态为false的节点。</p><p>​       对于使用邻接表进行存储的图，同一个图，由于邻接表中节点的存储顺序不同，广度优先遍历序列并不唯一。</p><p>​       由于广度优先算法不存在回退这种状态，因此需要建立一个辅助队列以存储当前顶点的下一层节点。</p><p>​       c语言代码实现如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MVNum 100 </span><span class="token comment" spellcheck="true">//最大顶点数 </span><span class="token comment" spellcheck="true">//创建一个中断函数 </span><span class="token keyword">void</span> <span class="token function">Interrupt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建一个中断函数 </span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用于检测换行符，使函数脱离scanf的连续输出 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//引入队列，这里是顺序队列 </span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>MVNum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分配给队列一个数组空间 </span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队列头 </span>    <span class="token keyword">int</span> rear<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队列尾 </span><span class="token punctuation">}</span>SqQueue<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//初始化队列 </span><span class="token punctuation">{</span>    Q<span class="token punctuation">.</span>front <span class="token operator">=</span> Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使队列头和队列尾都为0 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//入队 ，由于是循环队列，故少用一个元素空间，该函数在有MAXSIZE-1个元素时便已判断为满 </span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MVNum <span class="token operator">==</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断队列是否为满 ，这里是循环队列队列满的条件是 (Q.rear+1)%MAXSIZE == Q.front</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列已满！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">==</span> MVNum<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果队尾超出最大值但队列又不满，便使其对最大值求余运算 </span>            Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> Q<span class="token punctuation">.</span>rear<span class="token operator">%</span>MVNum<span class="token punctuation">;</span>        Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使变量e的值入队 </span>        Q<span class="token punctuation">.</span>rear<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//并使队尾加一 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>bool <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//队列判空操作 </span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果队列为空，返回true，否则返回false </span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//出队 </span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//首先判断队列是否为空，队列为空的条件是 Q.front == Q.rear</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列为空！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        a <span class="token operator">=</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导出队头元素数据 </span>        Q<span class="token punctuation">.</span>front<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使队头加一 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在队列非空的情况下，如果队头等于最大值，也对最大值做求余运算 </span>            Q<span class="token punctuation">.</span>front <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token operator">%</span>MVNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建矩阵表操作 </span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> ArcNode<span class="token punctuation">{</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该边所指向的顶点的位置 </span>    <span class="token keyword">struct</span> ArcNode <span class="token operator">*</span>nextarc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该向下一条边的指针 </span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//权值 </span><span class="token punctuation">}</span>ArcNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> VNode<span class="token comment" spellcheck="true">//顶点信息 </span><span class="token punctuation">{</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//顶点名称 </span>    ArcNode <span class="token operator">*</span>firstarc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向第一条依附该顶点的边的指针 </span><span class="token punctuation">}</span>VNode<span class="token punctuation">,</span>AdjList<span class="token punctuation">[</span>MVNum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//AdjList表示邻接表类型 </span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token comment" spellcheck="true">//邻接表 </span><span class="token punctuation">{</span>    AdjList vertices<span class="token punctuation">;</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">,</span>arcnum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//图的当前顶点数和边数 </span><span class="token punctuation">}</span>ALGraph<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitGraph</span><span class="token punctuation">(</span>ALGraph <span class="token operator">&amp;</span>G<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//图的初始化 </span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MVNum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使所有的第一个结点都置空，也就是后面设定的尾指针的判空操作 </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">CreateGraph</span><span class="token punctuation">(</span>ALGraph <span class="token operator">&amp;</span>G<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//图的创建 </span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录次数 </span>    <span class="token keyword">char</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//顶点变量 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入顶点数和边数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token punctuation">.</span>arcnum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//顶点数和边数的赋值 </span>    <span class="token function">Interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该函数用于检测并吸收换行符 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入顶点名称（连续输入）："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用循环输入图中顶点名称 </span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第i个顶点的命名 </span>    <span class="token punctuation">}</span>    <span class="token function">Interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该函数用于检测并吸收换行符</span>    <span class="token keyword">char</span> b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//顶点变量 </span>    <span class="token keyword">int</span> w<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//w为权值变量，j和k是用来记录次数的 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>arcnum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用循环输入所有边的两个顶点和权值 </span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入边的两个顶点:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c %c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入 </span>        <span class="token function">Interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该函数用于检测并吸收换行符</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>arcnum<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//该操作为书上的函数LocateVex操作 </span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//找到输入的顶点b的位置 </span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>arcnum<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//找到输入的顶点c的位置 </span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ArcNode <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建两个野结点 </span>        p1 <span class="token operator">=</span> <span class="token punctuation">(</span>ArcNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ArcNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token operator">-></span>adjvex <span class="token operator">=</span> k<span class="token punctuation">;</span>        p1<span class="token operator">-></span>weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//权值赋值 </span>        p1<span class="token operator">-></span>nextarc <span class="token operator">=</span> G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类似于头插法 </span>        G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//并使头结点永远放在第一位 </span>        p2 <span class="token operator">=</span> <span class="token punctuation">(</span>ArcNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ArcNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token operator">-></span>adjvex <span class="token operator">=</span> j<span class="token punctuation">;</span>        p2<span class="token operator">-></span>weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        p2<span class="token operator">-></span>nextarc <span class="token operator">=</span> G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc <span class="token operator">=</span> p2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">InputGraph</span><span class="token punctuation">(</span>ALGraph G<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//邻接表的输出 </span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录次数 </span>    ArcNode <span class="token operator">*</span>p1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于遍历链表 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"邻接表为：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用循环输出 </span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1 <span class="token operator">=</span> G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当p为空时，结束循环 </span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" --> %d"</span><span class="token punctuation">,</span>p1<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>            p1 <span class="token operator">=</span> p1<span class="token operator">-></span>nextarc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p指向p的下一个结点 </span>        <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//广度优先搜索遍历 </span>ArcNode <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个全局变量，以便于进行查找 </span><span class="token keyword">int</span> <span class="token function">FirstAdjVex</span><span class="token punctuation">(</span>ALGraph G<span class="token punctuation">,</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//表示u的第一个邻接点 </span><span class="token punctuation">{</span>    p <span class="token operator">=</span> G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局变量的赋值 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果头结点的下一个结点为空，返回负数，否则返回p结点的值 </span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">NextAdjVex</span><span class="token punctuation">(</span>ALGraph G<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//下一个邻接点 </span><span class="token punctuation">{</span>    p <span class="token operator">=</span> p<span class="token operator">-></span>nextarc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//由于p为全局变量，这里直接指向下一个便是 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果头结点的下一个结点为空，返回负数，否则返回p结点的值  </span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">;</span><span class="token punctuation">}</span>bool visited<span class="token punctuation">[</span>MVNum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问标志数组 ,其初始值为false </span><span class="token keyword">void</span> <span class="token function">InitVisited</span><span class="token punctuation">(</span>bool <span class="token operator">*</span>visited<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//标志数组初始化 </span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MVNum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">BFS</span><span class="token punctuation">(</span>ALGraph G<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//广度优先搜索遍历 ，非递归形式 </span><span class="token punctuation">{</span>    <span class="token keyword">int</span> u<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问第v个顶点，并置访问标志数组相应分量值为true </span>    SqQueue Q<span class="token punctuation">;</span>    <span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引入队列，初始化 </span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//入队 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//队列非空 </span>    <span class="token punctuation">{</span>        u <span class="token operator">=</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出队，别赋值给变量u </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token operator">=</span><span class="token function">FirstAdjVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>w<span class="token operator">=</span><span class="token function">NextAdjVex</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//依次检查u的所有邻接点w,w>=0表示存邻接点</span>        <span class="token comment" spellcheck="true">//函数FirstAdjVex(G,u)表示u的第一个邻接点，函数NextAdjVex(G)表示相对于w的下一个邻接点 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//w为u的尚未访问的邻接点 </span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问第w个顶点，并置访问标志数组相应分量值为true </span>                <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//w入队 </span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ALGraph G<span class="token punctuation">;</span>    <span class="token function">InitGraph</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化 </span>    <span class="token function">CreateGraph</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//邻接表的创建 </span>    <span class="token function">InputGraph</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//邻接表的输出 </span>    <span class="token function">BFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//广度优先搜索遍历 ，其中的2为测试值，可更换成变量 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NAT转换</title>
      <link href="/2022/06/08/nat-di-zhi-zhuan-huan/"/>
      <url>/2022/06/08/nat-di-zhi-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<p>﻿<strong>NAT地址转换</strong><br>现有的网络体系中，我们大多使用ipv4地址进行上网操作，ipv4最大地址为2^32<br>为了便于对IP地址进行管理， 根据IPv4地址的第一个字节，IPv4地址可以分为以下五类。</p><p>A类：0~127</p><p>B类：128~191</p><p>C类：192~223</p><p>D类：224~239，组播地址</p><p>E类：240~254，保留为研究测试使用</p><p>其中私有地址空间为<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20210129113120398.png" alt="在这里插入图片描述">私有地址无法直接访问公网</p><p>为了节省紧缺的ipv4地址空间，我们通常采用NAT    地址转换技术<br>NAT分为以下三类：<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20210129113301349.png" alt="在这里插入图片描述"><br>以下是NAT转换中涉及的名词<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20210129113517270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk5MDIzOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>NAT会在路由器中生成一张NAT表，在转换时路由器就是通过这张表来转换私有地址的。</p><p>1.静态NAT<br>静态NAT就是在内网用户访问外网时，将内网用户的私有地址转换为公网地址，一个内网用户就要对应一个公网地址，这对于节省ipv4地址意义不大，所以我们经常将静态NAT用在内网中供外网访问的服务器上。<br>具体配置流程如下：<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20210129114341199.png" alt="在这里插入图片描述"><br>2.动态NAT<br>动态NAT与静态NAT一样，一个内网用户对应一个公网地址，但不同的是，动态NAT中，我们采用NAT地址池，用户在访问外网时会用地址池动态的获取公网地址。<br>具体配置流程如下：<br><img src="https://img-blog.csdnimg.cn/20210129114616866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk5MDIzOQ==,size_16,color_FFFFFF,t_70" alt=""><br>值得注意的是在上述配置流程中我们采用了ACL来指定内网中可以访问外网的用户地址段。这就是ACL 的第二个作用。</p><p>3.端口复用<br>端口复用我们也称他为PAT，即端口地址转换<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20210129115154225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk5MDIzOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>具体配置流程如下：<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20210129115239766.png" alt="在这里插入图片描述"></p><p>在配置PAT时，首先我们要配置允许访问的ACL。然后再将它应用到NAT路由器的outside接口上，接口采用overload过载模式。这样数据包在通过这个接口时，就会在ip地址后加上端口号。一个接口可允许4000个端口号。端口号的知识大家可以自行去查询，我们在浏览器中访问一个网站就是访问它HTTP服务器的80端口。<br>最后查询NAT转换配置的命令是<br>show ip nat translations<br>当然在有数据包通过的时候才能查询到相关内容</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>杨辉三角形</title>
      <link href="/2022/06/08/acm-dao-li-yang-hui-san-jiao-xing/"/>
      <url>/2022/06/08/acm-dao-li-yang-hui-san-jiao-xing/</url>
      
        <content type="html"><![CDATA[<p>﻿Fans喜欢图形，而且喜欢把图形倒过来欣赏。有一次，他看见杨辉三角形 了，觉得很新鲜，于是就把它们大大小小地摆布出来。输入一些整数n（1≤n≤10），读入其每个整数，以该整数为行数，其画出来的倒杨辉三角形（每相邻2个数据由一个空格隔开）就是fans所喜欢欣赏的。Fans是手工做的，你却可以用编程更快捷地做出来，多爽啊!<br>样例输入</p><pre><code>53</code></pre><p>样例输出</p><pre><code>1 4 6 4 1 1 3 3 1  1 2 1   1 1    11 2 1 1 1  1</code></pre><p>解题思路：<br>首先将杨辉三角形存储到二维数组；<br>1<br>11<br>121<br>1331<br>然后倒过来输出，在输出的同时注意题目中要求 每相邻2个数据由一个空格隔开。</p><p>代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript">#include<span class="token operator">&lt;</span>iostream<span class="token operator">></span>using namespace std<span class="token punctuation">;</span>int <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    int n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">></span><span class="token operator">></span>n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        int a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        int i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token operator">||</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                  <span class="token keyword">else</span>                 <span class="token punctuation">{</span>                     a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//杨辉三角形中间的元素是左上角的元素与右上角的元素和</span>                 <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                cout<span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出空格</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token operator">-</span>i<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout<span class="token operator">&lt;</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从最后一行开始输出，即i=0；</span>                cout<span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout<span class="token operator">&lt;</span><span class="token operator">&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="/2022/06/06/shu-ju-jie-gou-kmp-suan-fa-c-yu-yan-shi-xian/"/>
      <url>/2022/06/06/shu-ju-jie-gou-kmp-suan-fa-c-yu-yan-shi-xian/</url>
      
        <content type="html"><![CDATA[<p>﻿最近学习数据结构串的匹配，王道书上只有伪代码实现，于是尝试写出可以运行的c语言代码。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> T<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> next<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//求next数组</span>    next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    next<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>T<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span>T<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">!=</span>T<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> S<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> T<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//KMP算法实现</span>      <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token function">Next</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token function">strlen</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span><span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>S<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">==</span>T<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              i<span class="token operator">++</span><span class="token punctuation">;</span>              j<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span><span class="token punctuation">{</span>              j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span><span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> i<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> source<span class="token punctuation">;</span>    source<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> target<span class="token punctuation">;</span>    target<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">KMP</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思科网络实验3.5.3</title>
      <link href="/2022/06/06/si-ke-wang-luo-shi-yan-3.5.3-vlan-pei-zhi-gu-zhang-pai-chu/"/>
      <url>/2022/06/06/si-ke-wang-luo-shi-yan-3.5.3-vlan-pei-zhi-gu-zhang-pai-chu/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="网络实验"><a href="#网络实验" class="headerlink" title="  -网络实验"></a>  -网络实验</h2><p>﻿</p><p> <strong>思科网络实验3.5.3 配置故障排除</strong><br>实验要求<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/2020102713553580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk5MDIzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>网络拓扑图</p><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201027135818729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk5MDIzOQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>解题过程<br>1.按照实验要求查看主机ip地址分配，发现PC6默认网关不对，改为192.168.30.1<br>2.交换机vlan配置<br>S1配置vlan 10,vlan 20,vlan 30,vlan 56,记得配置vlan名称。<br>交换机之间的接口配置trunk口，设置本征vlan为vlan56<br>S2中默认f0/1口的本征vlan为vlan1,我们需要关闭vlan1.设置vlan56为本征vlan，同时设置对应主机接口为access口，允许相应数据通过。<br>S3与S2一致。<br>完成之后，同一vlan之间能ping通，交换机之间也能ping通.    </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cisco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算子串出现次数</title>
      <link href="/2022/06/06/wen-ti-a-string-ji-suan-zi-chuan-chu-xian-ci-shu/"/>
      <url>/2022/06/06/wen-ti-a-string-ji-suan-zi-chuan-chu-xian-ci-shu/</url>
      
        <content type="html"><![CDATA[<p>﻿</p><p>题目描述<br>给定完全由小写字母组成的两个字符串a和b，求b在a中出现的次数</p><p>输入<br>第一行为字符串a；</p><p>第二行为字符串b;</p><p>输出<br>一个整数，表示b在a中出现的次数</p><p>样例输入</p><pre><code>sharonisagoodgirlihopeshecangetgoodgradesinthefinalexamsin</code></pre><p>样例输出</p><pre><code>2</code></pre><p>c++中，我常用substr(n,m)函数(从n开始截取长为m的部分字符串)来截取字符串长度，来比对截取部分的代码与子串是否相同。<br>代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript">#include<span class="token operator">&lt;</span>iostream<span class="token operator">></span>#include<span class="token operator">&lt;</span>string<span class="token operator">></span>using namespace std<span class="token punctuation">;</span>int <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string a<span class="token punctuation">;</span>    string b<span class="token punctuation">;</span>    int count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cin<span class="token operator">></span><span class="token operator">></span>a<span class="token punctuation">;</span>    cin<span class="token operator">></span><span class="token operator">></span>b<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;</span><span class="token operator">&lt;</span>count<span class="token operator">&lt;</span><span class="token operator">&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
